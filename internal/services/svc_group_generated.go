// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package services

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GroupInitRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsGroupInitRequest(buf []byte, offset flatbuffers.UOffsetT) *GroupInitRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GroupInitRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishGroupInitRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGroupInitRequest(buf []byte, offset flatbuffers.UOffsetT) *GroupInitRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GroupInitRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGroupInitRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GroupInitRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GroupInitRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GroupInitRequest) GroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GroupInitRequest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GroupInitRequest) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GroupInitRequest) Password() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GroupInitRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func GroupInitRequestAddGroupId(builder *flatbuffers.Builder, groupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(groupId), 0)
}
func GroupInitRequestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func GroupInitRequestAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(description), 0)
}
func GroupInitRequestAddPassword(builder *flatbuffers.Builder, password flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(password), 0)
}
func GroupInitRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type GroupInfoRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsGroupInfoRequest(buf []byte, offset flatbuffers.UOffsetT) *GroupInfoRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GroupInfoRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishGroupInfoRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGroupInfoRequest(buf []byte, offset flatbuffers.UOffsetT) *GroupInfoRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GroupInfoRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGroupInfoRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GroupInfoRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GroupInfoRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GroupInfoRequest) GroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GroupInfoRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func GroupInfoRequestAddGroupId(builder *flatbuffers.Builder, groupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(groupId), 0)
}
func GroupInfoRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type GroupAuthenticateRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsGroupAuthenticateRequest(buf []byte, offset flatbuffers.UOffsetT) *GroupAuthenticateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GroupAuthenticateRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishGroupAuthenticateRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGroupAuthenticateRequest(buf []byte, offset flatbuffers.UOffsetT) *GroupAuthenticateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GroupAuthenticateRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGroupAuthenticateRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GroupAuthenticateRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GroupAuthenticateRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GroupAuthenticateRequest) GroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GroupAuthenticateRequest) Password() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GroupAuthenticateRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GroupAuthenticateRequestAddGroupId(builder *flatbuffers.Builder, groupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(groupId), 0)
}
func GroupAuthenticateRequestAddPassword(builder *flatbuffers.Builder, password flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(password), 0)
}
func GroupAuthenticateRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type GroupUpdateRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsGroupUpdateRequest(buf []byte, offset flatbuffers.UOffsetT) *GroupUpdateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GroupUpdateRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishGroupUpdateRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGroupUpdateRequest(buf []byte, offset flatbuffers.UOffsetT) *GroupUpdateRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GroupUpdateRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGroupUpdateRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GroupUpdateRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GroupUpdateRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GroupUpdateRequest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GroupUpdateRequest) GroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GroupUpdateRequest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GroupUpdateRequest) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GroupUpdateRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func GroupUpdateRequestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func GroupUpdateRequestAddGroupId(builder *flatbuffers.Builder, groupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(groupId), 0)
}
func GroupUpdateRequestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func GroupUpdateRequestAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(description), 0)
}
func GroupUpdateRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
type GroupChangePasswordRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsGroupChangePasswordRequest(buf []byte, offset flatbuffers.UOffsetT) *GroupChangePasswordRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GroupChangePasswordRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishGroupChangePasswordRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGroupChangePasswordRequest(buf []byte, offset flatbuffers.UOffsetT) *GroupChangePasswordRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GroupChangePasswordRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGroupChangePasswordRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GroupChangePasswordRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GroupChangePasswordRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GroupChangePasswordRequest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GroupChangePasswordRequest) OldPassword() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GroupChangePasswordRequest) NewPassword() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GroupChangePasswordRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GroupChangePasswordRequestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func GroupChangePasswordRequestAddOldPassword(builder *flatbuffers.Builder, oldPassword flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(oldPassword), 0)
}
func GroupChangePasswordRequestAddNewPassword(builder *flatbuffers.Builder, newPassword flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(newPassword), 0)
}
func GroupChangePasswordRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
